[Cesium.Cartesian3(-2273210.903895066,   5010713.093106137, 3215001.8724564575   ),
Cesium.Cartesian3(-2273224.082965986,   5010687.508503787,  3215032.223847121 ),
Cesium.Cartesian3(-2273234.8866175534,  5010665.762098052,  3215058.301236912  ),
Cesium.Cartesian3(-2273226.0933175017,  5010610.627333201,  3215149.82746543 ),
Cesium.Cartesian3(-2273218.6519676885,  5010599.791462427,  3215171.8274242696) ,
Cesium.Cartesian3(-2273195.641550643,   5010609.29520489,  3215173.2757342206 ),
Cesium.Cartesian3(-2272990.3950969493,  5010701.5908712065,  3215174.5369936293) ,
Cesium.Cartesian3(-2273038.994589726,   5010813.820446155, 3214966.6664608875 ) ,
Cesium.Cartesian3(-2273080.939201127,   5010795.343219276, 3214965.814698123 ),
Cesium.Cartesian3(-2273168.7585837576,  5010743.579858468,  3214984.27513955 ),
Cesium.Cartesian3(-2273033.6832549293,  5010812.93642626,  3214971.7651229626 ),
Cesium.Cartesian3(-2273210.903895066,   5010713.093106137, 3215001.8724564575  ) ]




new Cesium.Cartesian3 ( -2273135.4976898846,  5010754.507214392, 3215006.016995991),
new Cesium.Cartesian3 ( -2273139.47043651, 5010713.972375699,3215065.85136762),
new Cesium.Cartesian3 ( -2273178.9003102784, 5010667.751562557,  3215109.8461850397),
new Cesium.Cartesian3 ( -2273166.6867254446,  5010640.004934284,  3215161.3313160557),
new Cesium.Cartesian3 ( -2273020.111111655,  5010706.399525259,  3215161.476713193),
new Cesium.Cartesian3 ( -2273054.7566642566,  5010784.488372708,  3215016.269828184),
new Cesium.Cartesian3 ( -2273135.492113242,  5010754.504541865,  3215006.0251361644)


    // 鼠标绘制漫游轨迹
    drawTrackLine() {
        // this.toggleOtherFunction('drawTrackLine');
        // 创建一个线的绘制图层
        graphicsLayer = new Cesium.GraphicsLayer(viewer, {
          getGraphic: this.getGraphic,
        });
        // 在图层上绘制e
        graphicsLayer.startDrawing({
          type: 'polyline',
          style: {
            color: Cesium.Color.fromCssColorString('#2e6099'),
            width: 5,
          },
        });
      },
  
      getGraphic(e) {
        // console.log('e:', e._positions);
        // 添加动态圆特效实体，
        let circleWave = viewer.entities.add({
          name: 'dynamic Circle',
          ellipse: {
            semiMinorAxis: 1.0,
            semiMajorAxis: 1.0,
            height: 8,
            heightReference: 2,
            material: new Cesium.CircleWaveMaterialProperty({
              duration: 1000,
              gradient: 0.5,
              color: Cesium.Color.ORANGE,
              count: 4,
            }),
          },
        });
        // console.log(e._positions);
        // 定义动画漫游对象
        animation = new Cesium.AnimationTool(viewer, {
          // 漫游的方向角
          heading: Cesium.Math.toRadians(0),
          // 漫游的俯仰角
          pitch: Cesium.Math.toRadians(0),
          // 设置漫游的视角类型。0：正常，不移动相机；1：跟随；2：锁定第一视角；3：上帝视角
          animationType: 3,
          // 是否循环漫游动画
          isLoop: false,
          // 是否显示漫游路径
          showPath: false,
          // 漫游路径(世界坐标点数组)
          // positions: e._positions,
          positions: this.pathPositions,
          // 漫游速度(m/s)
          speed: 5,
          // 倍速
          speedupFactor: 1,
          // 附加高程
          exHeight: 2,
          // 是否显示用时和距离提示信息
          showInfo: true,
          // 漫游的模型对象的url
          modelUrl:
            'http://webclient.smaryun.com:8200/3DData/Model/glb/Cesium_Man.glb',
          //模型对象参数，详见ModelGraphics对象的文档
          model: {
            //放大比例
            scale: 2,
            //固定大小设为0
            minimumPixelSize: 0,
          },
          // 完成漫游后的回调函数
          complete: function () {
            viewer.entities.remove(circleWave);
          },
          // 路径插值算法。可选：拉格朗日算法Cesium.LagrangePolynomialApproximation、线性插值 Cesium.LinearApproximation、埃尔米特插值插值Cesium.HermitePolynomialApproximation
          interpolationAlgorithm: Cesium.LagrangePolynomialApproximation,
          //是否获取当前点坐标，为true时，需配合返回当前点坐标的回调函数callBack一起使用
          isGetPositionNow: true,
          //回调函数，返回当前所在点坐标
          callBack: function (positionNow) {
            // 动态更新圆特效的位置
            circleWave.position = new Cesium.CallbackProperty(function () {
              return positionNow;
            }, false);
          },
          //是否设置模型运动姿态，保持朝向与运动方向一致
          isSetModelPosture: true,
          //是否需要将较大转弯点处理为圆弧
          isProcessCorner: false,
          //设置判断为转弯点的角度的最大值，不超过150的转角会被执行插值，处理为圆弧
          maxAngle: 150.0,
          //转弯处往圆弧曲线上插值点的步长，点个数=1/curveStep
          curveStep: 0.01,
          // 是否挂载动态扫描特效
          isAddScanEffect: false,
          // 扫描特效实例，可以是动态圆，也可以是雷达扫描
          scanEffect: undefined,
          // 是否获取路径点的真实高程
          isGetRealHeight: true,
          // 速度变化时，各个路径点对应的速度
          speedArray: undefined,
          // 各路径点对应的时间点
          timeArray: undefined,
          // 加速度数组
          accelerationArray: undefined,
          //是否执行onPositionCallback回调函数
          onPositionTag: true,
          // 当点经过设置的路径点时，返回路径点坐标和index索引号
          onPositionCallback: function (result) {
            console.log(
              '到达站点' + result.index + '，站点坐标：' + result.position
            );
          },
          // 用于判断当前点是否在路径点所在位置附近的精度
          disFactor: 10,
        });
        // 开启动画漫游
        animation.start();
      },
  